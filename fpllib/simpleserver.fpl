import socket

class App{
    func __init__(self, name){
        self.name=name
        self.pages=[]
    }

    func page(self, route, methods=[]){
        return lambda x{return Page(x, route, methods, self)}
    }

    func __str__(self){
        return f"<App {self.name}>"
    }

    func extract_data(self, method: str, request: str, args: list){ 
        for page in self.pages{
            if request==page.route and (method in page.methods or len(page.methods)==0){
                return ("200 OK", page(**args))
            }
        }
        return ("404 NOT FOUND", "")
    }

    func start(self, port=8000, info=True){
        if info{
            print(f"Starting server at {simpleserver.socket.gethostbyname(simpleserver.socket.gethostname())}:{port}")
        }
        with simpleserver.socket.socket(simpleserver.socket.AF_INET, simpleserver.socket.SOCK_STREAM) sock{
            sock.setsockopt(simpleserver.socket.SOL_SOCKET, simpleserver.socket.SO_REUSEADDR, 1)
            sock.bind((simpleserver.socket.gethostbyname(simpleserver.socket.gethostname()), port))
            sock.listen(simpleserver.socket.SOMAXCONN)

            while True{
                client, info=sock.accept()

                response=client.recv(1024)

                raw=response.split("\n")[0]
                method=raw.split(" ")[0]
                request="".join(raw.split(" ")[1])
                args={}
                if "?" in request{
                    args_=raw.split(" ")[1].split("?")[1].split("&")
                    for itm in args_{
                        if "=" in itm{
                            args[itm[0:itm.find("=")-1]]=itm[itm.find("=")+1:]
                        }
                    }
                    request=request[0:request.find("?")-1]
                }

                type, data=self.extract_data(method,request,args)

                n=client.sendall(f"HTTP/1.0 {type}\r\n\r\n{data}")
            
                client.close()       
            }
        }
        print("Closing server")
    }
}

class Page{
    func __init__(self, funct, route, methods, app){
        self.route=route
        self.methods=methods
        self.funct=funct
        self.app=app
        self.app.pages.append(self)
    }
    
    func __call__(self, **args){
        return self.__dict__["funct"](**args)
    }
    
    func __str__(self){
        return f"<Page '{self.route}' {self.__dict__['funct']}>"
    }
}