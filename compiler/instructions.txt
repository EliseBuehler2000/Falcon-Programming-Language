LOAD_CONST - Loads constant object to TOS

STORE_NAME(idx) - Stores TOS-1 to locals[idx]

STORE_GLOBAL(idx) - Stores TOS-1 to globals[idx]

LOAD_NAME(idx) - Loads locals[idx] to TOS

LOAD_GLOBAL(idx) - globals[idx] to TOS

BINOP_ADD - Implements TOS+TOS-1

BINOP_SUB - Implements TOS-TOS-1

BINOP_MUL - Implements TOS*TOS-1

BINOP_DIV - Implements TOS/TOS-1

UNARY_NEG - Implements -1*TOS

MAKE_FUNCTION(argc) - Creates a function using TOS-2 as code, TOS-3 as annotations, TOS-4 as tuple of positional arguments, TOS-5 as tuple of
    keyword arguments, TOS-5 as name. argc is total number of positional and keyword arguments. TOS-1 is flags. TOS is docstring.

RETURN_VAL - Return and pos TOS

CALL_FUNCTION(argc) - Calls callable TOS. Below that, the positional arguments following (left->right descending). argc is the total number of arguemnts passed.

LOAD_ATTR(idx) - Implements getattr(TOS, names[idx])

STORE_ATTR(idx) - Implement TOS.names[idx] =TOS-1

LOAD_BUILD_CLASS - Loads __build_class__

BUILD_TUPLE(n) - Pops n frames of stack (L->R and Top->Down) and pushes tuple

BUILD_DICT(n) - Pops n*2 frames of stack (L->R and Top->Down) with name above value and pushes dict

BUILD_LIST(n) - Pops n frames of stack (L->R and Top->Down) and pushes list (similar to BUILD_TUPLE)

BINOP_IS - Implements TOS is TOS-1

BINOP_ISNOT - Implements TOS is not TOS-1

BINOP_IN - Implements TOS in TOS-1

BINOP_EE - Implements TOS == TOS-1

POP_JMP_TOS_FALSE(idx) - Adds idx to IP and pops TOS if TOS is falsy

JUMP_TO(idx) - Unconditionally adds idx to IP

BINOP_SUBSCR - Implements TOS=TOS-1[TOS]

RAISE_EXC(tp) - Attempts to raise TOS as exception. If tp is 1, then is looks for a try block and if found, used the start_ip for the exc

STORE_SUBSCR - TOS-2[TOS-1]=TOS

POP_TOS - Pops TOS

DUP_TOS - Duplicates and pushes TOS

SETUP_TRY - Adds try block with handler at IP+TOS

FINISH_TRY - Pops try block

BINOP_EXC_CMP - If TOS exceptin type (TOS is type object) is the same exception as TOS-1 (instance), push True onto stack, otherwise False

BINOP_GT - IF TOS-1 > TOS, push True, or push False

BINOP_GTE - IF TOS-1 >= TOS, push True, or push False

BINOP_LT - IF TOS-1 < TOS, push True, or push False

BINOP_LTE - IF TOS-1 <= TOS, push True, or push False

FOR_TOS_ITER(arg) - Next on TOS for for loop or to arg if StopIteration is raised

JUMP_TO - vm->ip = arg

EXTRACT_ITER - Gets iter out of TOS, then push iterator onto stack

BREAK_LOOP - Break out of loop

CONTINUE_LOOP - Break out of loop

UNPACK_SEQ(n) - Unpacks sequence so that TOS is last of sequence, error if len(TOS)!=n

IMPORT_NAME(arg) - Imports library names[arg] and pushes module object onto stack for store or use

IMPORT_FROM_MOD - Loads attrs in list on TOS, from module TOS-1

MAKE_SLICE(arg) - Make slice from TOS-2[TOS-1:TOS]

BINOP_EE - Implements TOS != TOS-1

DEL_SUBSCR - Implements del TOS-1[TOS]

DEL_NAME(arg) - Implements del co_names[arg]

BINOP_MOD - IF TOS-1 % TOS

BINOP_POW - IF TOS-1 ** TOS

BINOP_AND(n) - Implements TOS and TOS-1

BINOP_OR(n) - Implements TOS or TOS-1

BINOP_NOT(n) - Implements not TOS

BUILD_STRING(n) - Concatonates string out of n stack items where each stack itm has a bool object
                above (True means __repr__, False means __str__) (TOS:top - bottom)

POP_JMP_TOS_TRUE(idx) - Adds idx to IP and pops TOS if TOS is falsy

RAISE_ASSERTIONERR - Raises AssertionError

DEL_GLBL(idx) - Implements del co_names[idx]

DEL_ATTR(idx) - del TOS.names[idx]

MAKE_CLOSURE(argc) - Same as MAKE_FUNCTION, but uses current namespace as a closure

LOAD_NONLOCAL(idx) - Similar to LOAD_NAME, but for closures

STORE_NONLOCAL(idx) - Similar to STORE_NAME, but for closures

DEL_NONLOCAL(idx) - Similar to DELNAME, but for closures

BITWISE_NOT - Implements ~TOS

BITWISE_AND - Implements TOS & TOS-1

BITWISE_OR - Implements TOS | TOS-1

BITWISE_LSHIFT - Implements TOS << TOS-1

BITWISE_RSHIFT - Implements TOS >> TOS-1

BITWISE_NOTIN - Implements TOS not in TOS-1

BITWISE_IN - Implements TOS in TOS-1

BINOP_FLDIV - Implements TOS//TOS-1

TERNARY_TEST - If TOS-2 is true, then put TOS on stack, otherwise put TOS-1

CALL_FUNCTION_BOTTOM(argc) - Same as CALL_FUNCTION, but TOS is on the bottom of everything

ANNOTATE_GLOBAL(idx) - Annotates globals names[idx] variable with TOS type.

ANNOTATE_NAME(idx) - Annotates local names[idx] variable with TOS type.

ANNOTATE_NONLOCAL(idx) - Annotates nonlocal names[idx] with TOS type.

STORE_ATTR(idx) - Implement TOS-1.names[idx] =TOS-2. Annotates variable with tp TOS. Checks __annotations__, if not found
                creates a new __annotations__

YIELD_VALUE - Yields TOS. If call stack callable is a function, return a generator of the function.

BUILD_SET(n) - Pops n frames of stack (L->R and Top->Down) and pushes set

CLEAR_EXC - Clears exception

ENTER_WHILE - Enter while loop

EXIT_WHILE - Exit while loop

ENTER_WITH - Implements TOS.__enter__()

EXIT_WITH - Implements TOS.__exit__()

LIST_APPEND(i) - Appends TOS to list at TOS-i. Used for list, set, and tuple comprehension

dict_set_noret(i) - Sets value TOS to key TOS-1 in dict at TOS-i. Used for dict comprehension

BINOP_XOR(n) - Implements TOS ^ TOS-1

BYTES_STRING(idx) - Pushes bytes object from co_consts[idx]

CALL_FUNCTION_KW(argc) - Same as CALL_FUNCTION, but with keyword arguments encoded with a tuple of keys at TOS-1 and the values below.

CALL_FUNCTION_U(argc) -  Same as CALL_FUNCTION, but with TOS-1 is a tuple of star kwargs objects, and TOS-2
                        a tuple of star args objects.

CALL_FUNCTION_KW_U(argc) - Combination of CALL_FUNCTION_KW and CALL_FUNCTION_KW_U, where CALL_FUNCTION_BOTTOM_KW TOS-1 becomes TOS-3

CALL_FUNCTION_BOTTOM_KW(argc) - Same as CALL_FUNCTION_BOTTOM, but with keyword arguments as described in CALL_FUNCTION_KW

CALL_FUNCTION_BOTTOM_U(argc) -  Same as CALL_FUNCTION_BOTTOM, but with unpacking of arguments as described in CALL_FUNCTION_U

CALL_FUNCTION_BOTTOM_KW_U(argc) - Combination of CALL_FUNCTION_KW and CALL_FUNCTION_KW_U
